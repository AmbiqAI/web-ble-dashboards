<!DOCTYPE html>
<html>

<head>
  <title>Web BLE Audio Test</title>
  <style>
    .container {
      width: 960px;
      height: 384px;
      margin-top: 30px;
      margin-bottom: 7.5px;
      margin: 0 auto;
    }
    .widget {
      background-color: #111111;
      border: 1px solid #000000;
      border-radius: 0px;
      padding: 12px;
      margin: 6px;
      float: left;
      color: #DAE3E3;
      padding-bottom: 16px;
    }
    .doublegraph {
      width: 423px;
      height: 177px;
    }
  </style>
  
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>


</head>

<body>
    <form>
        <button id="startNotifications">Start notifications</button>
        <button id="stopNotifications">Stop notifications</button>
    </form>
    <div class="container">
      <div class="double widget">
        <div class="label">Audio Waveform</div>
        <div id="Audio Waveform" class="doublegraph"></div>
      </div>
    </div>
</body>

<script>
    document.querySelector('#startNotifications').addEventListener('click', function(event) {
      event.stopPropagation();
      event.preventDefault();
  
    //   if (isWebBluetoothEnabled()) {
        // ChromeSamples.clearLog();
        onStartButtonClick();
    //   }
    });
    document.querySelector('#stopNotifications').addEventListener('click', function(event) {
      event.stopPropagation();
      event.preventDefault();
  
    //   if (isWebBluetoothEnabled()) {
        onStopButtonClick();
    //   }
    });
  </script>

<script>
    const serviceUuid =        '19690000-0000-1234-abcd-5678aabb1011';
    const characteristicUuid = '19690000-5001-1234-abcd-5678aabb1011';
    let audioContext;
    let audioDecoder = new AudioDecoder({output: playAudio, error: onAudioError});

    let myCharacteristic;
    let myValue = 0;
    let myBLE;


    // function initWaveform() {
    //     var title = 'Audio Waveform';
    //     // x = [];
    //     // y = [];
    //     // for (var i = 1; i<960; i++) {
    //     //     x.push(i);
    //     //     y.push(pcmData[i]);
    //     // }

    //     Plotly.plot(title, 
    //     [{
    //         y: [],
    //         name: item,
    //         mode: 'lines',
    //         width: 1,
    //         line: { width: 1, color: colors[colorIndex] }
    //     }], 
    //     {
    //         plot_bgcolor: '#111111',
    //         paper_bgcolor: '#111111',
    //         margin: { l: 8, r: 8, b: 18, t: 18 },
    //         showlegend: false,
    //         yaxis: {
    //             // 'showticklabels': false,
    //             'autorange': false,
    //             'range': [-.1, .1]
    //         },
    //         xaxis: {
    //             'range': [0, 960],
    //             'showticklabels': false,
    //             'autorange': false,
    //             'showgrid': true,
    //             'zeroline': true,
    //             tickfont: { size: 8 }
    //         }
    //     });
    // }

    function onStartButtonClick() {
        function initWaveform() {
            var title = 'Audio Waveform';
            // x = [];
            // y = [];
            // for (var i = 1; i<960; i++) {
            //     x.push(i);
            //     y.push(pcmData[i]);
            // }

            Plotly.plot(title, 
            [{
                y: [],
                name: "foo",
                mode: 'lines',
                width: 1,
                line: { width: 1, color:  "#FF355E"}
            }], 
            {
                plot_bgcolor: '#111111',
                paper_bgcolor: '#111111',
                margin: { l: 8, r: 8, b: 18, t: 18 },
                showlegend: false,
                yaxis: {
                'showticklabels': false,
                'autorange': false,
                'range': [-32000, 32000]
            },
            xaxis: {
                    'range': [0, 960],
                    'showticklabels': false,
                    'autorange': false,
                    'showgrid': true,
                    'zeroline': true,
                    tickfont: { size: 8 }
                }
            });
        }

        console.log('Requesting Bluetooth Device...');
        initWaveform();
        navigator.bluetooth.requestDevice({
            filters: [{
                services: [serviceUuid]
            }]
        })
        .then(device => {
            console.log('Connecting to GATT Server...');
            return device.gatt.connect();
        })
        .then(server => {
            console.log('Getting Service...');
            return server.getPrimaryService(serviceUuid);
        })
        .then(service => {
            console.log('Getting Characteristic...');
            return service.getCharacteristic(characteristicUuid);
        })
        .then(characteristic => {
            myCharacteristic = characteristic;
            return myCharacteristic.startNotifications().then(_ => {
                audioContext = new AudioContext({sampleRate: 16000});
                console.log('> Notifications started');
                myCharacteristic.addEventListener('characteristicvaluechanged',
                    handleNotifications);
            });
        })
        .catch(error => {
            console.log('Argh! ' + error);
        });
    }

    function onStopButtonClick() {
        if (myCharacteristic) {
            myCharacteristic.stopNotifications()
                .then(_ => {
                    console.log('> Notifications stopped');
                    myCharacteristic.removeEventListener('characteristicvaluechanged',
                        handleNotifications);
                })
                .catch(error => {
                    console.log('Argh! ' + error);
                });
        }
    }


    pcmData = [];
    function updateWaveform() {
        Plotly.restyle('Audio Waveform', { y: pcmData });

        // Plotly.animate('myDiv', {
        //     data: [{y: [Math.random(), Math.random(), Math.random()]}],
        //     traces: [0],
        //     layout: {}
        // }, {
        //     transition: {
        //     duration: 500,
        //     easing: 'cubic-in-out'
        //     },
        //     frame: {
        //     duration: 500
        //     }
        // })

    }

    function playAudio (audioData) { // AudioData object
        const audioBuffer = audioContext.createBuffer(1, 960, 16000);
        const buffer = audioBuffer.getChannelData(0); // Get the array
        const source = audioContext.createBufferSource(); // AudioBuffer source node
        audioData.copyTo(buffer, {planeIndex: 0}); // copy AudioData to AudioBuffer Channel
        // pcmData = buffer;
        // requestAnimationFrame(updateWaveform);
        source.buffer = audioBuffer;
        source.connect(audioContext.destination);
        source.start();
    }

    function onAudioError(error) {
        console.log(error);
    }

    function handleNotifications(event) {
        let value = event.target.value; // This is a DataView, I think
        // const channelCount = 1;
        // const bufferDurationS = .02;

        //  Decode the audio data from the Opus frame
        const init = {
            type: "key",
            data: value,
            timestamp: 0,
            duration: 20000,
        };
        const decoderConfig = {
            codec: "opus",
            sampleRate: 16000,
            numberOfChannels: 1}


        // console.log(decoderConfig);
        console.assert(AudioDecoder.isConfigSupported(decoderConfig));
        chunk = new EncodedAudioChunk(init);
        audioDecoder.configure(decoderConfig);
        audioDecoder.decode(chunk);
    }
</script>

